import React, { useEffect, useState } from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { useFonts } from 'expo-font';
import { ipAddr } from './ipconfig';

const RevenueLineChart = (props) => {
    const [loaded] = useFonts({
        UrbanistRegular: require('../../assets/fonts/Urbanist/static/Urbanist-Regular.ttf'),
        UrbanistBold: require('../../assets/fonts/Urbanist/static/Urbanist-SemiBold.ttf'),
        UrbanistMedium: require('../../assets/fonts/Urbanist/static/Urbanist-Medium.ttf'),
        UrbanistSemiBold: require('../../assets/fonts/Urbanist/static/Urbanist-SemiBold.ttf'),
        UrbanistLight: require('../../assets/fonts/Urbanist/static/Urbanist-Light.ttf'),
        MontserratBold: require('../../assets/fonts/Montserrat/static/Montserrat-Bold.ttf'),
        MontserratExtraLight: require('../../assets/fonts/Montserrat/static/Montserrat-ExtraLight.ttf'),
        MontserratSemiBold: require('../../assets/fonts/Montserrat/static/Montserrat-SemiBold.ttf'),
    });

    const { ownerEmail } = props;

    const [bookings, setBookings] = useState([]);
    const [mostBookedField, setMostBookedField] = useState('');
    const [totalRevenue, setTotalRevenue] = useState(0);
    const [percentageOfTotal, setPercentageOfTotal] = useState(0);
    
    function checkEventStatus(eventString) {
        const [timeRange, eventDate] = eventString.split(' ');
        const [startTime, endTime] = timeRange.split('-');
        const eventStartTime = new Date(`${eventDate}T${startTime}:00`);
        const eventEndTime = new Date(`${eventDate}T${endTime}:00`);
        const currentTime = new Date();

        if (currentTime >= eventStartTime && currentTime < eventEndTime) {
            return 'Ongoing';
        } else if (currentTime >= eventEndTime && currentTime > eventStartTime) {
            return 'Completed';
        } else {
            return 'Not Started';
        }
    }

    const fetchOwnerBookings = async () => {
        try {
            const response = await fetch(`http://${ipAddr}:3000/owner-bookings?ownerEmail=${ownerEmail}`);
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();
            const filteredBookings = data.filter(booking => !booking.Canceled && checkEventStatus(booking.Booking_Time) === 'Completed');
    
            // Initialize variables
            let fieldCounts = {};
            let totalRevenueByField = {};
            let mostFrequentField = '';
            let maxCount = 0;
            let totalRevenue = 0;
    
            // Iterate through filtered bookings to calculate field counts and total revenue by field
            filteredBookings.forEach(booking => {
                const fieldName = booking.Field_Name;
                const total = booking.Total;
    
                // Count the frequency of each field name
                fieldCounts[fieldName] = (fieldCounts[fieldName] || 0) + 1;
    
                // Accumulate total revenue by field
                totalRevenueByField[fieldName] = (totalRevenueByField[fieldName] || 0) + total;
    
                // // Calculate total revenue
                // totalRevenue += total;
            });
    
            // Find the most frequent field
            for (const fieldName in fieldCounts) 
            {
                console.log("fieldName: ", fieldName)
                if (fieldCounts[fieldName] > maxCount) {
                    maxCount = fieldCounts[fieldName];
                    mostFrequentField = fieldName;
                }
            }
    
            // Calculate total revenue for the most frequent field
            const revenueGeneratedByField = totalRevenueByField[mostFrequentField] || 0;
    
            // Calculate percentage of total revenue
            let percentageOfTotal = (revenueGeneratedByField / totalRevenue) * 100 || 0;
            
            if (percentageOfTotal === Infinity)
                percentageOfTotal = 100
            
            // Update state variables
            setMostBookedField(mostFrequentField);
            setTotalRevenue(revenueGeneratedByField);
            setPercentageOfTotal(percentageOfTotal);
    
        } catch (error) {
            console.error('Error fetching bookings:', error);
        }
    };
    
    

    useEffect(() => {
        fetchOwnerBookings();
    }, []);

    return (
        <View style={styles.container}>
            <Text style={styles.title}>Most Booked Field</Text>
            <Text style={styles.fieldName}>{mostBookedField}</Text>
            <Text style={styles.title}>Revenue Generated By Field</Text>
            <Text style={styles.totalRevenue}>PKR {totalRevenue}</Text>
            <Text style={styles.title}>Percentage of Total Revenue</Text>
            <Text style={styles.totalRevenue}>{percentageOfTotal}%</Text>
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        backgroundColor: '#000000',
        alignItems: 'flex-start',
        marginTop: 20,
        paddingHorizontal: 20,
        borderColor: 'white',
        borderWidth: 1,
        borderRadius: 12,
    },
    title: {
        fontFamily: 'MontserratLight',
        fontSize: 22,
        color: '#FFFFFF',
        marginTop: 20,
        marginBottom: 10,
    },
    fieldName: {
        fontFamily: 'MontserratBold',
        fontSize: 26,
        color: '#D45A01',
    },
    totalRevenue: {
        fontFamily: 'MontserratBold',
        fontSize: 32,
        color: '#D45A01',
        textAlign: 'center',
        marginBottom: 20,
    },
});

export default RevenueLineChart;
